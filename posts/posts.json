[
  {
    "id": 2,
    "title": "Un vistazo a WebComponents",
    "summary": "Los WebComponents son una utilidad muy poco tenida en cuenta. ¿Vale la pena por encima de React, Angular o Vue?",
    "url": "/post.html?id=2",
    "image": "img/posts/un-vistazo-a-webcomponents.webp",
    "content": "<p>Los WebComponents son una opci&oacute;n en la que no solemos pensar cuando planteamos el Frontend. Por lo general, preferimos un framework o una librer&iacute;a, como React, Angular o Vue. Pero &iquest;siempre vale la pena?</p><h2>&iquest;Qu&eacute; son los WebComponents?</h2><p>Antes de nada, te preguntar&aacute;s qu&eacute; un WebComponent. Sencillamente, es un conjunto de herramientas nativas para crear componentes visuales. Al igual que otras herramientas, como React, te permite desarrollar un elemento reutilizable para tu Frontend.</p><p>Ahora bien, la gran diferencia con todas las tecnolog&iacute;as que conocemos es que WebComponents es nativo. Solo necesitas HTML, CSS y JavaScript. Dentro de esta \"herramientas\" se encuentran varias utilidades que podemos aprovechar: los templates, el Shadow DOM, los custom elements...</p><h2>&iquest;Cu&aacute;ndo vale la pena usarlos?</h2><p>Por lo general, a nivel empresarial no vale mucho la pena. Como podr&eacute;is ver m&aacute;s adelante, para crear cosas complejas hay que dar muchos pasos. Ahora bien, hay veces en que es preferible por encima de React, Angular o Vue. </p><p>El caso m&aacute;s habitual es que el Frontend no sea una caracter&iacute;stica esencial en tu proyecto. En estos casos, usar un framework resulta demasiado engorroso y pesado. Si gran parte de la carga del proyecto se va al Backend, &iquest;por qu&eacute; dedicar tanto tiempo a la interfaz?</p><p>De igual manera, si tienes una idea de los componentes del Frontend y la l&oacute;gica no es muy compleja, no veo necesario acudir a un framework. Una vez dominas los WebComponents, se hacen vers&aacute;tiles, r&aacute;pidos, legibles y, sobre todo, escalables.</p><p>Mi portfolio, por ejemplo, est&aacute; construido con HTML, CSS y JavaScript Vanilla. A la hora de ampliarlo, he decidido usar WebComponents para no repetir c&oacute;digo de forma innecesaria. Y, en el momento de construir el blog, ha sido una magn&iacute;fica herramienta.</p><h2>Un ejemplo de uso</h2><p>Este mismo blog usa WebComponents. Si quer&eacute;is echarle un vistazo, aqu&iacute; ten&eacute;is el repositorio del <a href=\"https://github.com/csanbardev/portfolio\">portfolio con el blog</a>. Una pr&aacute;ctica habitual es crear una carpeta para guardar los componentes. S&iacute;, al igual que en los frameworks habituales, lo ideal es que est&eacute;n separados; si no, no tendr&iacute;a sentido usarlos.</p><p>Dentro vamos a tener los componentes como ficheros de JavaScript con la nomenclatura t&iacute;pica de una clase: MiComponente.js. &iquest;Y c&oacute;mo ser&iacute;a por dentro? Hay varias formas de dise&ntilde;ar nuestro componente. A continuaci&oacute;n, os muestro una sencilla:</p><h3>Crea un <em>template</em></h3><p>Necesitas un c&oacute;digo HTML sobre el que trabajar. Sencillamente, crea una constante que defina un <em>template</em> e ins&eacute;rtale tu c&oacute;digo HTML. Aqu&iacute; te muestro un ejemplo:</p><p><code>const template = document.createElement(\"template\");<br/>template.innerHTML = /* html */ `&lt;article class=\"post-card\"&gt; &lt;a class=\"post-url\"&gt; &lt;img class=\"post-image\" /&gt;&lt;h3 class=\"post-title\"&gt;&lt;/h3&gt;&lt;p class=\"post-summary\"&gt;&lt;/p&gt;&lt;/a&gt;&lt;/article&gt;`;</code></p><h3>Crea una clase que extienda HTMLElement</h3><p>Vas a necesitar una clase con el nombre de tu componente. Dentro, cr&eacute;ale un constructor que llame al constructor por defecto de HTMLElement. &iexcl;Con eso ya casi lo tienes!</p><p>Una utilidad muy buena es el m&eacute;todo connectedCallback, al que se llama cada vez que se carga el componente. Si lo sobreescribes, puedes usar el this para insertar tu c&oacute;digo HTML (del template) e, incluso, modificarlo con los atributos que hayas definido.</p><p><code>connectedCallback(){ const html = template.content.cloneNode(true); this.append(html); // get attributes const url = this.getAttribute(\"url\"); const image = this.getAttribute(\"image\"); const title = this.getAttribute(\"title\"); const summary = this.getAttribute(\"summary\"); // assign attributes if(url) this.querySelector(\".post-url\").href = url; if(image) this.querySelector(\".post-image\").src = image; if(title) this.querySelector(\".post-title\").textContent = title; if(summary) this.querySelector(\".post-summary\").textContent = summary; }</code></p><h3>Llama a tu componente</h3><p>Lo siguiente es definir el componente con customElements.define('mi-componente', MiComponente). Con eso, ya es casi casi funcional.</p><p>Solo falta ir a tu documento HTML, importar el script y llamarlo como &lt;mi-componente&gt;. &iexcl;Ojo, que el formato es muy importante!</p><h2>Conclusiones</h2><p>Como hemos visto, los WebComponents pueden ser una herramienta muy &uacute;til. Si vienes de usar frameworks t&iacute;picos de JavaScript, ver&aacute;s que funcionan muy parecido. Pero no olvidemos que se trata de una herramienta nativa, con las ventajas que esto trae.</p><p>Si te interesa aprender m&aacute;s sobre los WebComponents, te aconsejo que acudas a la tremenda<a href=\"https://lenguajejs.com/webcomponents/\"> documentaci&oacute;n creada por Manzdev</a>.</p>"

  },
  {
    "id": 1,
    "title": "Un vistazo a Apache Kafka",
    "summary": "¿Qué es Apache Kafka? ¿Cómo usarlo para comunicar mis microservicios? ¿Por qué lo he usado en mi proyecto?",
    "url": "/post?id=1",
    "image": "img/posts/un-vistazo-a-apache-kafka.webp",
    "content": "<p>Uno de los grandes problemas de los microservicios es c&oacute;mo comunicarlos. En mi proyecto de gestor de stock he usado 𝐀𝐩𝐚𝐜𝐡𝐞 𝐊𝐚𝐟𝐤𝐚, una de las herramientas m&aacute;s usadas por las empresas para gestionar esta problem&aacute;tica.<br/></p><h3>&iquest;Qu&eacute; es 𝐀𝐩𝐚𝐜𝐡𝐞 𝐊𝐚𝐟𝐤𝐚?</h3><p>Como sab&eacute;is, mi 𝐠𝐞𝐬𝐭𝐨𝐫 𝐝𝐞 𝐬𝐭𝐨𝐜𝐤 est&aacute; siendo desarrollado en Java con Spring Boot. La particularidad que tiene es que usa dos bases de datos completamente distintas: 𝐌𝐨𝐧𝐠𝐨𝐃𝐁 y 𝐌𝐲𝐒𝐐𝐋. Comunicarlas parece imposible, &iquest;verdad? </p><p>Para eso est&aacute; Apache Kafka: crea mensajes mediante eventos personalizados que env&iacute;an y reciben los datos que necesitas. Una de las cosas que lo hacen una herramienta tan potente es que sea multiplataforma. No solo lo puedes usar en distintos lenguajes y entornos. Tambi&eacute;n te permite gestionar mensajes que vengan desde un microservicio con arquitectura completamente distinta a la de tu receptor.<br/></p><p>Por ejemplo, podr&iacute;as emitir un mensaje con .NET y gestionar su recepci&oacute;n con un microservicio construido en Java.</p><h3>&iquest;Y c&oacute;mo funciona?</h3><p>Resumidamente, creo un 𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝐨𝐫 de mensajes ligado a ciertos eventos. Por ejemplo, cuando creo un Producto en 𝐌𝐲𝐒𝐐𝐋.</p><p>Apache Kafka crear&aacute; ese evento asignado a un \"topic\" y ser&aacute; escuchado por el 𝐜𝐨𝐧𝐬𝐮𝐦𝐢𝐝𝐨𝐫, que tomar&aacute; los datos. Lo m&aacute;s normal, ser&aacute; enviar un ID &uacute;nico para el evento, junto a la fecha, el tipo y los datos. Estos datos ser&aacute;n, en mi caso, una unidad de objeto o varios de ellos, en formato JSON.<br/></p><p>En mi gestor de stock, el consumidor insertar&aacute; un documento con los datos del Producto en la base de datos de MongoDB. As&iacute;, tanto 𝐌𝐲𝐒𝐐𝐋 como 𝐌𝐨𝐧𝐠𝐨𝐃𝐁 tienen los mismos registros. Solo tengo que asegurarme de que el formato de los datos sea el correcto.<br/></p><h3>Conclusiones</h3><p>Este un resumen muy resumido de 𝐀𝐩𝐚𝐜𝐡𝐞 𝐊𝐚𝐟𝐤𝐚. Os invito a investigarlo y a integrarlo de manera inteligente a vuestros proyectos. Si os apetece echarle un vistazo, os comparto unos enlaces de inter&eacute;s que yo he usado durante mi aprendizaje:<br/></p><ul><li><a href=\"https://sacavix.com/2022/03/comunicando-microservicios-mediante-apache-kafka-ejemplo/\">https://sacavix.com/2022/03/comunicando-microservicios-mediante-apache-kafka-ejemplo/</a></li><li><a href=\"https://www.youtube.com/watch?v=1dvCwFgHZCk&amp;list=LL\">https://www.youtube.com/watch?v=1dvCwFgHZCk&amp;list=LL</a></li><li><a href=\"https://kafka.apache.org/documentation/\">https://kafka.apache.org/documentation/</a></li></ul>"
  }
]
